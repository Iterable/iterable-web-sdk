# This workflow will do a clean install of node dependencies, cache/restore them,
# build the source code and run tests

# source: https://github.com/actions/starter-workflows/blob/main/ci/node.js.yml

name: ci
permissions:
  contents: read
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Use Node.js 18.12.0
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: "18.12.0"
          cache: "yarn"
      - run: yarn install --frozen-lockfile
      - run: yarn prepublishOnly
      - run: node index.node.js
      - run: yarn test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - run: yarn check-deps

  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
      fail-fast: false

    steps:
      - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
      - name: Use Node.js 18.12.0
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: "18.12.0"
          cache: "yarn"
      - run: yarn install --frozen-lockfile
      - run: yarn prepublishOnly
      - name: Cache React dependencies
        uses: actions/cache@v4
        with:
          path: react-example/node_modules
          key: ${{ runner.os }}-react-deps-${{ hashFiles('react-example/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-react-deps-
      - name: Install React example dependencies
        working-directory: ./react-example
        run: |
          # Try frozen lockfile first, fallback to regeneration if corrupted
          yarn install --frozen-lockfile || {
            echo "Lockfile corrupted, regenerating..."
            rm yarn.lock
            yarn install
          }
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('react-example/package.json', 'react-example/playwright.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ hashFiles('react-example/package.json') }}-
            ${{ runner.os }}-playwright-
      - name: Install Playwright browsers
        working-directory: ./react-example
        run: yarn playwright:install --with-deps
      - name: Install server management tools
        working-directory: ./react-example
        run: yarn add -D wait-on
      - name: Create environment configuration
        working-directory: ./react-example
        run: |
          cat > .env << 'EOF'
          API_KEY=${{ secrets.ITERABLE_API_KEY }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          USE_JWT=true
          JWT_GENERATOR=https://jwt-generator.stg-itbl.co/generate
          LOGIN_EMAIL=websdk-playwright-test@iterable.com
          EOF
      - name: Build React example app
        working-directory: ./react-example
        run: yarn build
      - name: Start React example server
        working-directory: ./react-example
        run: |
          yarn webpack serve --config webpack.config.js --port 8080 --host 0.0.0.0 &
          SERVER_PID=$!
          echo "Started server with PID: $SERVER_PID"

          # Wait for server to be ready with proper health check
          yarn wait-on http://localhost:8080 --timeout 60000

          # Verify server health
          curl -f http://localhost:8080 > /dev/null || {
            echo "‚ùå Server health check failed"
            ps aux | grep webpack
            exit 1
          }
          echo "‚úÖ Server is ready and healthy"
      - name: Run Playwright tests
        working-directory: ./react-example
        run: |
          yarn playwright test --project=${{ matrix.browser }} --reporter=github
        env:
          CI: true
          PLAYWRIGHT_TIMEOUT: 30000
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: react-example/playwright-report/
          retention-days: 30
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: react-example/test-results/
          retention-days: 7
      - name: Cleanup server processes
        if: always()
        run: |
          echo "üßπ Cleaning up server processes..."
          pkill -f "webpack serve" || true
          pkill -f "node.*webpack" || true
          echo "‚úÖ Cleanup completed"
